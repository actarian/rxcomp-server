{"version":3,"file":"src/rxcomp-server.ts","sources":["../../src/renderer/node.ts","../../src/renderer/renderer.ts","../../src/platform/server.ts","../../src/server.module.ts"],"sourcesContent":["import { Parser } from 'htmlparser2';\n\n/*\nexport const NO_CHILDS = [\n\t'title',\n\t'base',\n\t'meta',\n\t'link',\n\t'img',\n\t'br',\n\t'input',\n];\n\nconst SKIP = [\n\t'html',\n\t'head',\n\t'title',\n\t'base',\n\t'meta',\n\t'script',\n\t'link',\n\t'body',\n];\n*/\n\n///\n/*\nif (true) {\n\tdocument.createComment = nodeValue => {\n\t\treturn new RxComment(null, nodeValue);\n\t};\n\tdocument.createTextNode = nodeValue => {\n\t\treturn new RxText(null, nodeValue);\n\t};\n}\n*/\n///\n\nexport enum RxNodeType {\n\tELEMENT_NODE = 1, //\tUn nodo Element come <p> o <div>.\n\tTEXT_NODE = 3, //\tL'attuale Text dentro un Element o Attr.\n\tCDATA_SECTION_NODE = 4, //\tUna CDATASection, ad esempio <!CDATA[[ … ]]>.\n\tPROCESSING_INSTRUCTION_NODE = 7, //\tUna ProcessingInstruction di un documento XML, come <?xml-stylesheet … ?>.\n\tCOMMENT_NODE = 8, //\tUn nodo Comment, come <!-- … -->.\n\tDOCUMENT_NODE = 9, //\tUn nodo Document.\n\tDOCUMENT_TYPE_NODE = 10, //\tUn nodo DocumentType, come <!DOCTYPE html>.\n\tDOCUMENT_FRAGMENT_NODE = 11, //\tUn nodo DocumentFragment.\n}\n\nexport enum SelectorType {\n\tNone = -1,\n\tId = 0,\n\tClass = 1,\n\tAttribute = 2,\n\tTagName = 3,\n}\n\nexport function isRxElement(x: RxNode): x is RxElement {\n\treturn x.nodeType === RxNodeType.ELEMENT_NODE;\n}\n\nexport function isRxText(x: RxNode): x is RxText {\n\treturn x.nodeType === RxNodeType.TEXT_NODE;\n}\n\nexport function isRxComment(x: RxNode): x is RxComment {\n\treturn x.nodeType === RxNodeType.COMMENT_NODE;\n}\nexport function isRxDocument(x: RxNode): x is RxDocument {\n\treturn x.nodeType === RxNodeType.DOCUMENT_NODE;\n}\nexport function isRxDocumentType(x: RxNode): x is RxDocumentType {\n\treturn x.nodeType === RxNodeType.DOCUMENT_TYPE_NODE;\n}\nexport function isRxProcessingInstruction(x: RxNode): x is RxProcessingInstruction {\n\treturn x.nodeType === RxNodeType.PROCESSING_INSTRUCTION_NODE;\n}\n\nexport function parse(html: string) {\n\tconst doc = new RxDocument();\n\tlet parentNode: RxElement = doc,\n\t\tnode;\n\tconst parser = new Parser(\n\t\t{\n\t\t\tonopentag: (nodeName, attributes) => {\n\t\t\t\t// console.log(nodeName);\n\t\t\t\tnode = new RxElement(parentNode, nodeName, attributes);\n\t\t\t\tparentNode.childNodes.push(node);\n\t\t\t\tparentNode = node;\n\t\t\t\t// if (NO_CHILDS.indexOf(nodeName) === -1) {\n\t\t\t\t//\tconsole.log(nodeName);\n\t\t\t\t//\tparentNode = node;\n\t\t\t\t// }\n\t\t\t},\n\t\t\tonclosetag: (nodeName) => {\n\t\t\t\tif (parentNode.parentNode) {\n\t\t\t\t\tparentNode = parentNode.parentNode;\n\t\t\t\t}\n\t\t\t},\n\t\t\tontext: (nodeValue) => {\n\t\t\t\tif (nodeValue.length) {\n\t\t\t\t\tconst textNode = new RxText(parentNode, nodeValue);\n\t\t\t\t\tparentNode.childNodes.push(textNode);\n\t\t\t\t}\n\t\t\t},\n\t\t\tonprocessinginstruction: (nodeName, nodeValue) => {\n\t\t\t\t// console.log('onprocessinginstruction', nodeName, nodeValue);\n\t\t\t\tif (nodeName === '!doctype') {\n\t\t\t\t\tnode = new RxDocumentType(parentNode, nodeValue);\n\t\t\t\t} else {\n\t\t\t\t\tnode = new RxProcessingInstruction(parentNode, nodeValue);\n\t\t\t\t}\n\t\t\t\tparentNode.childNodes.push(node);\n\t\t\t},\n\t\t\toncomment: nodeValue => {\n\t\t\t\t// console.log('oncomment', nodeValue);\n\t\t\t\tnode = new RxComment(parentNode, nodeValue);\n\t\t\t\tparentNode.childNodes.push(node);\n\t\t\t\t// parentNode = node;\n\t\t\t},\n\t\t\toncommentend: () => {\n\t\t\t\t// console.log('oncommentend');\n\t\t\t\t// parentNode = parentNode.parentNode;\n\t\t\t},\n\t\t\toncdatastart: () => {\n\t\t\t\tconsole.log('oncdatastart');\n\t\t\t},\n\t\t\toncdataend: () => {\n\t\t\t\tconsole.log('oncdataend');\n\t\t\t},\n\t\t\tonerror: error => {\n\t\t\t\tconsole.log('error', error);\n\t\t\t},\n\t\t\t/*\n\t\t\tonopentagname: (name) => {\n\t\t\t\tconsole.log('onopentagname', name);\n\t\t\t},\n\t\t\tonattribute: (name, value) => {\n\t\t\t\tconsole.log('onattribute', name, value);\n\t\t\t},\n\t\t\tonreset: () => {\n\t\t\t\tconsole.log('reset');\n\t\t\t},\n\t\t\tonend: () => {\n\t\t\t\tconsole.log('end');\n\t\t\t},\n\t\t\t*/\n\t\t},\n\t\t{\n\t\t\tdecodeEntities: false,\n\t\t\tlowerCaseTags: true,\n\t\t}\n\t);\n\tparser.write(html);\n\tparser.end();\n\treturn doc;\n}\n\nexport function getQueries(selector: string): RxQuery[] {\n\tconst queries: RxQuery[] = [];\n\tselector\n\t\t.trim()\n\t\t.split(' ')\n\t\t.forEach((x: string) => {\n\t\t\tx.trim()\n\t\t\t\t.split('>')\n\t\t\t\t.forEach((x, i) => {\n\t\t\t\t\tconst regex = /\\.([^\\.[]+)|\\[([^\\.\\[]+)\\]|([^\\.\\[\\]]+)/g;\n\t\t\t\t\t/*eslint no-useless-escape: \"off\"*/\n\t\t\t\t\t// const regex = new RegExp(`\\.([^\\.[]+)|\\[([^\\.\\[]+)\\]|([^\\.\\[\\]]+)`, 'g');\n\t\t\t\t\tconst selectors = [];\n\t\t\t\t\tconst matches = x.matchAll(regex);\n\t\t\t\t\tfor (const match of matches) {\n\t\t\t\t\t\tif (match[1]) {\n\t\t\t\t\t\t\tselectors.push({ selector: match[1], type: SelectorType.Class });\n\t\t\t\t\t\t} else if (match[2]) {\n\t\t\t\t\t\t\tselectors.push({\n\t\t\t\t\t\t\t\tselector: match[2],\n\t\t\t\t\t\t\t\ttype: SelectorType.Attribute,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (match[3]) {\n\t\t\t\t\t\t\tselectors.push({\n\t\t\t\t\t\t\t\tselector: match[3],\n\t\t\t\t\t\t\t\ttype: SelectorType.TagName,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// console.log('match', match);\n\t\t\t\t\t}\n\t\t\t\t\tconst selector =\n\t\t\t\t\t\ti > 0\n\t\t\t\t\t\t\t? { selector: x, selectors, inner: true }\n\t\t\t\t\t\t\t: { selector: x, selectors, inner: false };\n\t\t\t\t\tqueries.push.call(queries, selector);\n\t\t\t\t});\n\t\t});\n\treturn queries;\n}\n\nexport function querySelectorAll(queries: RxQuery[], childNodes: RxNode[], nodes = []): RxElement[] | null {\n\treturn null;\n}\n\nexport function querySelector(queries: RxQuery[], childNodes: RxNode[], query: RxQuery | null = null): RxElement | null {\n\tlet node = null;\n\tconst match = (child: RxElement, selector: RxSelector) => {\n\t\tswitch (selector.type) {\n\t\t\tcase SelectorType.Class:\n\t\t\t\treturn child.classList.indexOf(selector.selector) !== -1;\n\t\t\tcase SelectorType.Attribute:\n\t\t\t\treturn Object.keys(child.attributes).indexOf(selector.selector) !== -1;\n\t\t\tcase SelectorType.TagName:\n\t\t\t\treturn child.nodeName === selector.selector;\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\t};\n\tif (query || queries.length) {\n\t\tquery = query || queries.shift() as RxQuery;\n\t\tfor (let child of childNodes) {\n\t\t\tif (child instanceof RxElement) {\n\t\t\t\tlet has = query.selectors.reduce((p, selector, i) => {\n\t\t\t\t\treturn p && match(child as RxElement, selector);\n\t\t\t\t}, true);\n\t\t\t\tif (has) {\n\t\t\t\t\t// console.log(query);\n\t\t\t\t\tif (queries.length) {\n\t\t\t\t\t\treturn querySelector(queries, child.childNodes);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn child;\n\t\t\t\t\t}\n\t\t\t\t} else if (!query.inner) {\n\t\t\t\t\tnode = querySelector(queries, child.childNodes, query);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn node;\n}\n\nexport function cloneNode(source: RxNode, deep: boolean = false, parentNode = null): RxNode {\n\tlet node: RxNode;\n\tif (isRxElement(source)) {\n\t\tconst nodeElement: RxElement = new RxElement(\n\t\t\tparentNode,\n\t\t\tsource.nodeName,\n\t\t\tObject.assign({}, source.attributes)\n\t\t);\n\t\tif (deep) {\n\t\t\tnodeElement.childNodes = source.childNodes.map(x => cloneNode.apply(x, [nodeElement, deep]));\n\t\t}\n\t\tnode = nodeElement;\n\t} else if (isRxText(source)) {\n\t\tnode = new RxText(parentNode, source.nodeValue);\n\t} else if (isRxComment(source)) {\n\t\tnode = new RxComment(parentNode, source.nodeValue);\n\t} else if (isRxDocument(source)) {\n\t\tconst documentElement: RxDocument = new RxDocument();\n\t\tif (deep) {\n\t\t\tdocumentElement.childNodes = source.childNodes.map(x => cloneNode.apply(x, [documentElement, deep]));\n\t\t}\n\t\tnode = documentElement;\n\t} else {\n\t\tthrow ('Invalid node type');\n\t}\n\treturn node;\n}\n\nexport class RxSelector {\n\tselector: string = '';\n\ttype: SelectorType = SelectorType.None;\n\tconstructor(options: RxSelector) {\n\t\tif (options) {\n\t\t\tObject.assign(this, options);\n\t\t}\n\t}\n}\n\nexport class RxQuery {\n\tselector: string = '';\n\tselectors: RxSelector[] = [];\n\tinner: boolean = false;\n\tconstructor(options: RxQuery) {\n\t\tif (options) {\n\t\t\tObject.assign(this, options);\n\t\t}\n\t}\n}\n\nexport class RxNode {\n\tparentNode: RxElement | null;\n\tnodeType: RxNodeType;\n\tnodeValue: string | null = null;\n\n\tconstructor(parentNode: RxElement | null = null) {\n\t\tthis.parentNode = parentNode;\n\t\tthis.nodeType = -1;\n\t}\n\tcloneNode(deep: boolean = false) {\n\t\treturn cloneNode.apply(this, [this, deep]);\n\t}\n\tserialize(): string {\n\t\treturn ``;\n\t}\n}\n\nexport class RxElement extends RxNode {\n\tnodeName: string;\n\tchildNodes: RxNode[];\n\tattributes: { [key: string]: string | null };\n\tget children(): RxElement[] {\n\t\tlet children: RxElement[] = [],\n\t\t\ti = 0,\n\t\t\tnode,\n\t\t\tnodes = this.childNodes;\n\t\tnode = nodes[i++];\n\t\twhile (node) {\n\t\t\tnode = nodes[i++];\n\t\t\tif (node.nodeType === RxNodeType.ELEMENT_NODE) {\n\t\t\t\tchildren.push(node as RxElement);\n\t\t\t}\n\t\t}\n\t\treturn children;\n\t}\n\tget childElementCount(): number {\n\t\tlet i = 0,\n\t\t\tcount = 0,\n\t\t\tnode,\n\t\t\tnodes = this.childNodes;\n\t\tnode = nodes[i++];\n\t\twhile (node) {\n\t\t\tif (node.nodeType === RxNodeType.ELEMENT_NODE) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tnode = nodes[i++];\n\t\t}\n\t\treturn count;\n\t}\n\tget firstChild(): RxNode | null {\n\t\tlet node = null;\n\t\tif (this.childNodes.length) {\n\t\t\tnode = this.childNodes[0];\n\t\t}\n\t\treturn node;\n\t}\n\tget firstElementChild(): RxElement | null {\n\t\tfor (let node of this.childNodes) {\n\t\t\tif (isRxElement(node)) {\n\t\t\t\treturn node;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\tget lastElementChild(): RxElement | null {\n\t\tconst nodes = this.childNodes;\n\t\tfor (let i = nodes.length - 1; i > -1; i--) {\n\t\t\tconst node = nodes[i];\n\t\t\tif (isRxElement(node)) {\n\t\t\t\treturn node;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\tget previousSibling(): RxNode | null {\n\t\tlet node = null;\n\t\tif (this.parentNode) {\n\t\t\tconst index = this.parentNode.childNodes.indexOf(this);\n\t\t\tif (index > 0) {\n\t\t\t\tnode = this.parentNode.childNodes[index - 1];\n\t\t\t}\n\t\t}\n\t\treturn node;\n\t}\n\tget nextSibling(): RxNode | null {\n\t\tlet node = null;\n\t\tif (this.parentNode) {\n\t\t\tconst index = this.parentNode.childNodes.indexOf(this);\n\t\t\tif (index !== -1 && index < this.parentNode.childNodes.length - 1) {\n\t\t\t\tnode = this.parentNode.childNodes[index];\n\t\t\t}\n\t\t}\n\t\treturn node;\n\t}\n\tget outerHTML(): string | null {\n\t\tlet html = null;\n\t\tif (this.parentNode) {\n\t\t\thtml = this.parentNode.serialize();\n\t\t}\n\t\treturn html;\n\t}\n\tget wholeText(): string | null {\n\t\tlet nodeValue = null;\n\t\tif (isRxText(this)) {\n\t\t\tnodeValue = this.nodeValue;\n\t\t}\n\t\treturn nodeValue;\n\t}\n\tget classList(): string[] {\n\t\tconst classList: string[] = this.attributes.class\n\t\t\t? this.attributes.class.split(' ').map(c => c.trim())\n\t\t\t: [];\n\t\treturn classList;\n\t}\n\tset innerText(nodeValue: string | null) {\n\t\tthis.childNodes = [new RxText(this, nodeValue)];\n\t}\n\tget innerText(): string | null {\n\t\treturn this.childNodes.filter((n): n is RxText => isRxText(n)).map(n => n.innerText).join('');\n\t}\n\tset textContent(nodeValue: string | null) {\n\t\tthis.innerText = String(nodeValue);\n\t}\n\tget textContent(): string | null {\n\t\treturn this.innerText;\n\t}\n\tset innerHTML(html: string) {\n\t\tconst doc = parse(html);\n\t\tconst childNodes = doc.childNodes.map(n => {\n\t\t\tn.parentNode = this;\n\t\t\treturn n;\n\t\t});\n\t\tthis.childNodes = childNodes;\n\t}\n\tconstructor(parentNode: RxElement | null = null, nodeName: string, attributes: { [key: string]: string | null } | null = null) {\n\t\tsuper(parentNode);\n\t\tthis.nodeType = RxNodeType.ELEMENT_NODE;\n\t\tthis.nodeName = nodeName;\n\t\tthis.attributes = attributes || {};\n\t\tthis.childNodes = [];\n\t\t/*\n\t\t\tif (SKIP.indexOf(nodeName) === -1) {\n\t\t\t\tconsole.log(parentNode.nodeName, '>', nodeName);\n\t\t}\n\t\t*/\n\t}\n\tappend(...nodesOrDOMStrings: (RxNode | string)[]) {\n\t\tnodesOrDOMStrings = nodesOrDOMStrings.map(nodeOrDomString => {\n\t\t\tlet node;\n\t\t\tif (typeof nodeOrDomString === 'string') {\n\t\t\t\tnode = new RxText(this, nodeOrDomString);\n\t\t\t} else {\n\t\t\t\tnode = nodeOrDomString;\n\t\t\t\tnode.parentNode = this;\n\t\t\t}\n\t\t\treturn node;\n\t\t});\n\t\tArray.prototype.push.apply(this.childNodes, nodesOrDOMStrings);\n\t\t/*\n\t\tfor (let nodeOrDomString of nodesOrDOMStrings) {\n\t\t\t\tlet node;\n\t\t\t\tif (typeof nodeOrDomString === 'string') {\n\t\t\t\t\tnode = new RxText(this, nodeOrDomString);\n\t\t\t\t} else {\n\t\t\t\t\tnode = nodeOrDomString;\n\t\t\t\t}\n\t\t\t\tthis.childNodes.push(node);\n\t\t}\n\t\t*/\n\t}\n\tprepend(...nodesOrDOMStrings: (RxNode | string)[]) {\n\t\tnodesOrDOMStrings = nodesOrDOMStrings.map(nodeOrDomString => {\n\t\t\tlet node;\n\t\t\tif (typeof nodeOrDomString === 'string') {\n\t\t\t\tnode = new RxText(this, nodeOrDomString);\n\t\t\t} else {\n\t\t\t\tnode = nodeOrDomString;\n\t\t\t\tnode.parentNode = this;\n\t\t\t}\n\t\t\treturn node;\n\t\t});\n\t\tArray.prototype.unshift.apply(this.childNodes, nodesOrDOMStrings);\n\t\t/*\n\t\t\tfor (let nodeOrDomString of nodesOrDOMStrings) {\n\t\t\t\tlet node;\n\t\t\t\tif (typeof nodeOrDomString === 'string') {\n\t\t\t\t\tnode = new RxText(this, nodeOrDomString);\n\t\t\t\t} else {\n\t\t\t\t\tnode = nodeOrDomString;\n\t\t\t\t}\n\t\t\t\tthis.childNodes.unshift(node);\n\t\t}\n\t\t*/\n\t}\n\treplaceChildren(...nodesOrDOMStrings: (RxNode | string)[]) {\n\t\tconst nodes: RxNode[] = nodesOrDOMStrings.map((nodeOrDomString) => {\n\t\t\tlet node: RxNode;\n\t\t\tif (typeof nodeOrDomString === 'string') {\n\t\t\t\tnode = new RxText(this, nodeOrDomString);\n\t\t\t} else {\n\t\t\t\tnode = nodeOrDomString as RxNode;\n\t\t\t\tnode.parentNode = this;\n\t\t\t}\n\t\t\treturn node;\n\t\t});\n\t\tthis.childNodes = nodes;\n\t}\n\tquerySelectorAll(selector: string): RxNode[] | null {\n\t\tconst queries = getQueries(selector);\n\t\tconst nodes = this.childNodes.filter(x => {\n\t\t\treturn true;\n\t\t});\n\t\tconsole.log(queries);\n\t\treturn nodes.length ? nodes : null;\n\t}\n\tquerySelector(selector: string): RxNode | null {\n\t\tconst queries = getQueries(selector);\n\t\tconst node = querySelector(queries, this.childNodes);\n\t\treturn node;\n\t}\n\thasAttribute(attribute: string): boolean {\n\t\treturn Object.keys(this.attributes).indexOf(attribute.toLowerCase()) !== -1;\n\t}\n\tgetAttribute(attribute: string): string | null {\n\t\treturn this.attributes[attribute.toLowerCase()] || null;\n\t}\n\tsetAttribute(attribute: string, value: any) {\n\t\tthis.attributes[attribute.toLowerCase()] = value.toString();\n\t}\n\tremoveAttribute(attribute: string) {\n\t\tdelete this.attributes[attribute];\n\t}\n\treplaceChild(newChild: RxNode, oldChild: RxNode): RxNode {\n\t\tconst index = this.childNodes.indexOf(oldChild);\n\t\tif (index !== -1) {\n\t\t\tthis.childNodes[index] = newChild;\n\t\t\tnewChild.parentNode = this;\n\t\t}\n\t\treturn oldChild;\n\t}\n\tinsertBefore(newNode: RxNode, referenceNode: RxNode | null = null): RxNode {\n\t\tconst index = referenceNode\n\t\t\t? this.childNodes.indexOf(referenceNode)\n\t\t\t: this.childNodes.length;\n\t\tif (index !== -1) {\n\t\t\tthis.childNodes.splice(index, 0, newNode);\n\t\t\tnewNode.parentNode = this;\n\t\t}\n\t\treturn newNode;\n\t}\n\taddListener(eventName: string, handler: (e: any) => {}) { }\n\tremoveListener(eventName: string, handler: (e: any) => {}) { }\n\tserialize(): string {\n\t\treturn `<${\n\t\t\tthis.nodeName\n\t\t\t}${this.serializeAttributes()}>${this.childNodes\n\t\t\t\t.map(x => x.serialize())\n\t\t\t\t.join('')}</${this.nodeName}>`;\n\t}\n\tserializeAttributes(): string {\n\t\tlet attributes = '';\n\t\tconst keys = Object.keys(this.attributes);\n\t\tif (keys.length) {\n\t\t\tattributes =\n\t\t\t\t' ' +\n\t\t\t\tkeys\n\t\t\t\t\t.map(k => {\n\t\t\t\t\t\treturn `${k}=\"${this.attributes[k]}\"`;\n\t\t\t\t\t})\n\t\t\t\t\t.join(' ');\n\t\t}\n\t\treturn attributes;\n\t}\n}\n\nexport class RxText extends RxNode {\n\tnodeValue: string;\n\tget outerHTML(): string | null {\n\t\tlet html = null;\n\t\tif (this.parentNode) {\n\t\t\thtml = this.parentNode.serialize();\n\t\t}\n\t\treturn html;\n\t}\n\tget wholeText(): string | null {\n\t\treturn this.nodeValue;\n\t}\n\tset innerText(nodeValue) {\n\t\tthis.nodeValue = String(nodeValue);\n\t}\n\tget innerText(): string | null {\n\t\treturn this.nodeValue;\n\t}\n\tset textContent(nodeValue) {\n\t\tthis.nodeValue = String(nodeValue);\n\t}\n\tget textContent(): string | null {\n\t\treturn this.nodeValue;\n\t}\n\tconstructor(parentNode: RxElement | null = null, nodeValue: any) {\n\t\tsuper(parentNode);\n\t\tthis.nodeType = RxNodeType.TEXT_NODE;\n\t\tthis.nodeValue = String(nodeValue);\n\t}\n\tserialize(): string {\n\t\treturn this.nodeValue;\n\t}\n}\n\nexport class RxCData extends RxNode {\n\tnodeValue: string;\n\tget outerHTML(): string | null {\n\t\tlet html = null;\n\t\tif (this.parentNode) {\n\t\t\thtml = this.parentNode.serialize();\n\t\t}\n\t\treturn html;\n\t}\n\tget wholeText(): string | null {\n\t\treturn this.nodeValue;\n\t}\n\tset innerText(nodeValue) {\n\t\tthis.nodeValue = String(nodeValue);\n\t}\n\tget innerText(): string | null {\n\t\treturn this.nodeValue;\n\t}\n\tset textContent(nodeValue) {\n\t\tthis.nodeValue = String(nodeValue);\n\t}\n\tget textContent(): string | null {\n\t\treturn this.nodeValue;\n\t}\n\tconstructor(parentNode: RxElement | null = null, nodeValue: any) {\n\t\tsuper(parentNode);\n\t\tthis.nodeType = RxNodeType.CDATA_SECTION_NODE;\n\t\tthis.nodeValue = String(nodeValue);\n\t}\n\tserialize(): string {\n\t\treturn this.nodeValue;\n\t}\n}\n\nexport class RxComment extends RxNode {\n\tnodeValue: string;\n\tget outerHTML(): string | null {\n\t\tlet html = null;\n\t\tif (this.parentNode) {\n\t\t\thtml = this.parentNode.serialize();\n\t\t}\n\t\treturn html;\n\t}\n\tget wholeText(): string | null {\n\t\treturn this.nodeValue;\n\t}\n\tset innerText(nodeValue) {\n\t\tthis.nodeValue = String(nodeValue);\n\t}\n\tget innerText(): string | null {\n\t\treturn this.nodeValue;\n\t}\n\tset textContent(nodeValue) {\n\t\tthis.nodeValue = String(nodeValue);\n\t}\n\tget textContent(): string | null {\n\t\treturn this.nodeValue;\n\t}\n\tconstructor(parentNode: RxElement | null = null, nodeValue: any) {\n\t\tsuper(parentNode);\n\t\tthis.nodeType = RxNodeType.COMMENT_NODE;\n\t\tthis.nodeValue = String(nodeValue);\n\t}\n\tserialize(): string {\n\t\treturn `<!--${this.nodeValue}-->`;\n\t}\n}\n\nexport class RxProcessingInstruction extends RxNode {\n\tconstructor(parentNode: RxElement | null = null, nodeValue: any) {\n\t\tsuper(parentNode);\n\t\tthis.nodeType = RxNodeType.PROCESSING_INSTRUCTION_NODE;\n\t\tthis.nodeValue = String(nodeValue);\n\t}\n\tserialize(): string {\n\t\treturn `<${this.nodeValue}>`;\n\t}\n}\n\nexport class RxDocumentType extends RxNode {\n\tconstructor(parentNode: RxElement | null = null, nodeValue: any) {\n\t\tsuper(parentNode);\n\t\tthis.nodeType = RxNodeType.DOCUMENT_TYPE_NODE;\n\t\tthis.nodeValue = String(nodeValue);\n\t}\n\tserialize(): string {\n\t\treturn `<${this.nodeValue}>`;\n\t}\n}\n\nexport class RxDocument extends RxElement {\n\tget hidden(): true {\n\t\treturn true;\n\t}\n\tget visibilityState(): 'prerender' {\n\t\treturn 'prerender';\n\t}\n\tget doctype(): RxDocumentType | null {\n\t\treturn this.childNodes.find(x => isRxDocumentType(x)) as RxDocumentType;\n\t}\n\tget body(): RxElement | null {\n\t\treturn this.childNodes.find(x => isRxElement(x) && x.nodeName === 'body') as RxElement;\n\t}\n\tget head(): RxElement | null {\n\t\treturn this.childNodes.find(x => isRxElement(x) && x.nodeName === 'head') as RxElement;\n\t}\n\tget title(): string | null {\n\t\tconst title = this.childNodes.find(x => isRxElement(x) && x.nodeName === 'title') as RxElement;\n\t\tif (title) {\n\t\t\treturn title.innerText;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\tset title(nodeValue: string | null) {\n\t\tconst title = this.childNodes.find(x => isRxElement(x) && x.nodeName === 'title') as RxElement;\n\t\tif (title) {\n\t\t\ttitle.innerText = nodeValue;\n\t\t}\n\t}\n\tget documentElement(): RxElement | null {\n\t\treturn this.firstElementChild;\n\t}\n\tconstructor() {\n\t\tsuper(null, '#document');\n\t\tthis.nodeType = RxNodeType.DOCUMENT_NODE;\n\t\tthis.childNodes = [];\n\t}\n\tcreateAttribute() { }\n\t// Creates a new Attr object and returns it.\n\tcreateAttributeNS() { }\n\t// Creates a new attribute node in a given namespace and returns it.\n\tcreateCDATASection() { }\n\t// Creates a new CDATA node and returns it.\n\tcreateComment() { }\n\t// Creates a new comment node and returns it.\n\tcreateDocumentFragment() { }\n\t// Creates a new document fragment.\n\tcreateElement(nodeName: string): RxElement {\n\t\treturn new RxElement(null, nodeName);\n\t}\n\t// Creates a new element with the given tag name.\n\tcreateElementNS() { }\n\t// Creates a new element with the given tag name and namespace URI.\n\tcreateEvent() { }\n\t// Creates an event object.\n\tcreateNodeIterator() { }\n\t// Creates a NodeIterator object.\n\tcreateProcessingInstruction() { }\n\t// Creates a new ProcessingInstruction object.\n\tcreateRange() { }\n\t// Creates a Range object.\n\tcreateTextNode(nodeValue: string) {\n\t\treturn new RxText(null, nodeValue);\n\t}\n\t// Creates a text node.\n\tcreateTouchList() { }\n\t// Creates a TouchList object.\n\tcreateTreeWalker() { }\n\t// Creates a TreeWalker object.\n\tserialize(): string {\n\t\treturn `${this.childNodes.map(x => x.serialize()).join('')}`;\n\t}\n}\n","import { parse, RxDocument } from './node';\n\nexport default class Renderer {\n\tstatic document: Document | RxDocument;\n\tstatic bootstrap(documentOrHtml: Document | string) {\n\t\tif (typeof documentOrHtml === 'string') {\n\t\t\tthis.document = parse(documentOrHtml);\n\t\t} else {\n\t\t\tthis.document = documentOrHtml;\n\t\t}\n\t}\n\n\tstatic querySelector(selector: string) {\n\t\treturn this.document.querySelector(selector);\n\t}\n}\n","import { Platform, Module, IElement } from 'rxcomp';\nimport Renderer from '../renderer/renderer';\n\nexport default class Server extends Platform {\n\tstatic bootstrap(moduleFactory?: typeof Module, html?: string) {\n\t\tif (!html) {\n\t\t\tthrow 'missing html template';\n\t\t}\n\t\tRenderer.bootstrap(html);\n\t\tif (!moduleFactory) {\n\t\t\tthrow 'missing moduleFactory';\n\t\t}\n\t\tif (!moduleFactory.meta) {\n\t\t\tthrow 'missing moduleFactory meta';\n\t\t}\n\t\tif (!moduleFactory.meta.bootstrap) {\n\t\t\tthrow 'missing bootstrap';\n\t\t}\n\t\tif (!moduleFactory.meta.bootstrap.meta) {\n\t\t\tthrow 'missing bootstrap meta';\n\t\t}\n\t\tif (!moduleFactory.meta.bootstrap.meta.selector) {\n\t\t\tthrow 'missing bootstrap meta selector';\n\t\t}\n\t\tconst meta = this.resolveMeta(moduleFactory);\n\t\tconst module = new moduleFactory();\n\t\tmodule.meta = meta;\n\t\tconst instances = module.compile(meta.node, window);\n\t\tmodule.instances = instances;\n\t\tconst root = instances[0];\n\t\troot.pushChanges();\n\t\treturn module;\n\t}\n\n\tstatic querySelector(selector: string): IElement | null {\n\t\treturn Renderer.document.querySelector(selector) as IElement;\n\t}\n}\n","import { Factory, IModuleMeta, Module, Pipe } from 'rxcomp';\n\nconst factories: typeof Factory[] = [\n];\n\nconst pipes: typeof Pipe[] = [\n];\n\n/**\n *  ServerModule Class.\n * @example\n * export default class AppModule extends Module {}\n *\n * AppModule.meta = {\n *  imports: [\n *   CoreModule,\n *    ServerModule\n *  ],\n *  declarations: [\n *   ErrorsComponent\n *  ],\n *  bootstrap: AppComponent,\n * };\n * @extends Module\n */\nexport default class ServerModule extends Module {\n\n\tstatic meta: IModuleMeta = {\n\t\tdeclarations: [\n\t\t\t...factories,\n\t\t\t...pipes,\n\t\t],\n\t\texports: [\n\t\t\t...factories,\n\t\t\t...pipes,\n\t\t]\n\t};\n\n}\n"],"names":["RxNodeType","SelectorType","isRxElement","x","nodeType","ELEMENT_NODE","isRxText","TEXT_NODE","isRxComment","COMMENT_NODE","isRxDocument","DOCUMENT_NODE","isRxDocumentType","DOCUMENT_TYPE_NODE","isRxProcessingInstruction","PROCESSING_INSTRUCTION_NODE","parse","html","doc","RxDocument","parentNode","node","parser","Parser","onopentag","nodeName","attributes","RxElement","childNodes","push","onclosetag","ontext","nodeValue","length","textNode","RxText","onprocessinginstruction","RxDocumentType","RxProcessingInstruction","oncomment","RxComment","oncommentend","oncdatastart","console","log","oncdataend","onerror","error","decodeEntities","lowerCaseTags","write","end","getQueries","selector","queries","trim","split","forEach","i","regex","selectors","matches","matchAll","match","type","Class","Attribute","TagName","inner","call","querySelectorAll","nodes","querySelector","query","child","classList","indexOf","Object","keys","shift","has","reduce","p","cloneNode","source","deep","nodeElement","assign","map","apply","documentElement","RxSelector","options","None","RxQuery","RxNode","serialize","append","nodesOrDOMStrings","nodeOrDomString","Array","prototype","prepend","unshift","replaceChildren","filter","hasAttribute","attribute","toLowerCase","getAttribute","setAttribute","value","toString","removeAttribute","replaceChild","newChild","oldChild","index","insertBefore","newNode","referenceNode","splice","addListener","eventName","handler","removeListener","serializeAttributes","join","k","children","count","class","c","n","innerText","String","RxCData","CDATA_SECTION_NODE","find","title","firstElementChild","createAttribute","createAttributeNS","createCDATASection","createComment","createDocumentFragment","createElement","createElementNS","createEvent","createNodeIterator","createProcessingInstruction","createRange","createTextNode","createTouchList","createTreeWalker","Renderer","bootstrap","documentOrHtml","document","Server","moduleFactory","meta","resolveMeta","module","instances","compile","window","root","pushChanges","Platform","factories","pipes","ServerModule","Module","declarations","exports"],"mappings":"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"}