{"version":3,"sources":["src/rxcomp-server.ts","../../src/renderer/node.ts","../../src/renderer/renderer.ts","../../src/platform/server.ts","../../src/server.module.ts"],"names":["g","f","exports","module","require","define","amd","globalThis","self","rxcomp","server","htmlparser2","this","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","Constructor","protoProps","staticProps","prototype","_inheritsLoose","subClass","superClass","create","constructor","__proto__","_arrayLikeToArray","arr","len","arr2","Array","_createForOfIteratorHelperLoose","o","allowArrayLike","it","Symbol","iterator","isArray","minLen","n","toString","call","slice","name","from","test","_unsupportedIterableToArray","done","value","TypeError","next","bind","RxNodeType","SelectorType","isRxElement","x","nodeType","ELEMENT_NODE","isRxText","TEXT_NODE","isRxComment","COMMENT_NODE","isRxDocument","DOCUMENT_NODE","isRxDocumentType","DOCUMENT_TYPE_NODE","parse","html","node","doc","RxDocument","parentNode","parser","Parser","onopentag","nodeName","attributes","RxElement","childNodes","push","onclosetag","ontext","nodeValue","textNode","RxText","onprocessinginstruction","RxDocumentType","RxProcessingInstruction","oncomment","RxComment","oncommentend","oncdatastart","console","log","oncdataend","onerror","error","decodeEntities","lowerCaseTags","write","end","getQueries","selector","queries","trim","split","forEach","_step","selectors","_iterator","matchAll","match","type","Class","Attribute","TagName","inner","querySelector","query","shift","_step2","_loop","child","reduce","p","classList","indexOf","keys","v","_iterator2","_ret","cloneNode","source","deep","nodeElement","assign","map","apply","DOCUMENT_FRAGMENT_NODE","nodeDocumentFragment","RxDocumentFragment","documentElement","RxNode","_proto","serialize","_RxNode","_this","_proto2","append","_this2","_len","arguments","nodesOrDOMStrings","nodeOrDomString","prepend","_this3","_len2","unshift","replaceChildren","_this4","_len3","nodes","querySelectorAll","filter","hasAttribute","attribute","toLowerCase","getAttribute","setAttribute","removeAttribute","replaceChild","newChild","oldChild","index","removeChild","splice","insertBefore","newNode","referenceNode","addListener","eventName","handler","removeListener","serializeAttributes","join","_this5","k","get","children","count","_step3","_iterator3","class","c","set","innerText","String","_this6","_RxNode2","_this7","RxCData","_RxNode3","_this8","CDATA_SECTION_NODE","_RxNode4","_this9","_RxNode5","_this10","PROCESSING_INSTRUCTION_NODE","_RxNode6","_this11","_RxElement","_this12","_RxElement2","_this13","find","title","firstElementChild","_proto8","createAttribute","createAttributeNS","createCDATASection","createComment","createDocumentFragment","createElement","createElementNS","createEvent","createNodeIterator","createProcessingInstruction","createRange","createTextNode","createTouchList","createTreeWalker","Renderer","bootstrap","documentOrHtml","document","process","global","Server","_Platform","moduleFactory","meta","resolveMeta","instances","compile","pushChanges","Platform","factories","pipes","ServerModule","_Module","Module","declarations","concat","RxQuery","options","RxSelector","None","_cloneNode","isRxProcessingInstruction","_querySelector"],"mappings":"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","file":"dist\\umd\\rxcomp-server.min.js","sourcesContent":[null,"import { Parser } from 'htmlparser2';\r\n\r\n/*\r\nexport const NO_CHILDS = [\r\n\t'title',\r\n\t'base',\r\n\t'meta',\r\n\t'link',\r\n\t'img',\r\n\t'br',\r\n\t'input',\r\n];\r\n\r\nconst SKIP = [\r\n\t'html',\r\n\t'head',\r\n\t'title',\r\n\t'base',\r\n\t'meta',\r\n\t'script',\r\n\t'link',\r\n\t'body',\r\n];\r\n*/\r\n\r\n///\r\n/*\r\nif (true) {\r\n\tdocument.createComment = nodeValue => {\r\n\t\treturn new RxComment(null, nodeValue);\r\n\t};\r\n\tdocument.createTextNode = nodeValue => {\r\n\t\treturn new RxText(null, nodeValue);\r\n\t};\r\n}\r\n*/\r\n///\r\n\r\nexport enum RxNodeType {\r\n\tELEMENT_NODE = 1, //\tUn nodo Element come <p> o <div>.\r\n\tTEXT_NODE = 3, //\tL'attuale Text dentro un Element o Attr.\r\n\tCDATA_SECTION_NODE = 4, //\tUna CDATASection, ad esempio <!CDATA[[ … ]]>.\r\n\tPROCESSING_INSTRUCTION_NODE = 7, //\tUna ProcessingInstruction di un documento XML, come <?xml-stylesheet … ?>.\r\n\tCOMMENT_NODE = 8, //\tUn nodo Comment, come <!-- … -->.\r\n\tDOCUMENT_NODE = 9, //\tUn nodo Document.\r\n\tDOCUMENT_TYPE_NODE = 10, //\tUn nodo DocumentType, come <!DOCTYPE html>.\r\n\tDOCUMENT_FRAGMENT_NODE = 11, //\tUn nodo DocumentFragment.\r\n}\r\n\r\nexport enum SelectorType {\r\n\tNone = -1,\r\n\tId = 0,\r\n\tClass = 1,\r\n\tAttribute = 2,\r\n\tTagName = 3,\r\n}\r\n\r\nexport function isRxElement(x: RxNode): x is RxElement {\r\n\treturn x.nodeType === RxNodeType.ELEMENT_NODE;\r\n}\r\nexport function isRxText(x: RxNode): x is RxText {\r\n\treturn x.nodeType === RxNodeType.TEXT_NODE;\r\n}\r\nexport function isRxComment(x: RxNode): x is RxComment {\r\n\treturn x.nodeType === RxNodeType.COMMENT_NODE;\r\n}\r\nexport function isRxDocument(x: RxNode): x is RxDocument {\r\n\treturn x.nodeType === RxNodeType.DOCUMENT_NODE;\r\n}\r\nexport function isRxDocumentFragment(x: RxNode): x is RxDocumentFragment {\r\n\treturn x.nodeType === RxNodeType.DOCUMENT_FRAGMENT_NODE;\r\n}\r\nexport function isRxDocumentType(x: RxNode): x is RxDocumentType {\r\n\treturn x.nodeType === RxNodeType.DOCUMENT_TYPE_NODE;\r\n}\r\nexport function isRxProcessingInstruction(x: RxNode): x is RxProcessingInstruction {\r\n\treturn x.nodeType === RxNodeType.PROCESSING_INSTRUCTION_NODE;\r\n}\r\n\r\nexport function parse(html: string) {\r\n\tconst doc = new RxDocument();\r\n\tlet parentNode: RxElement = doc,\r\n\t\tnode;\r\n\tconst parser = new Parser(\r\n\t\t{\r\n\t\t\tonopentag: (nodeName, attributes) => {\r\n\t\t\t\t// console.log(nodeName);\r\n\t\t\t\tnode = new RxElement(parentNode, nodeName, attributes);\r\n\t\t\t\tparentNode.childNodes.push(node);\r\n\t\t\t\tparentNode = node;\r\n\t\t\t\t// if (NO_CHILDS.indexOf(nodeName) === -1) {\r\n\t\t\t\t//\tconsole.log(nodeName);\r\n\t\t\t\t//\tparentNode = node;\r\n\t\t\t\t// }\r\n\t\t\t},\r\n\t\t\tonclosetag: (nodeName) => {\r\n\t\t\t\tif (parentNode.parentNode) {\r\n\t\t\t\t\tparentNode = parentNode.parentNode;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tontext: (nodeValue) => {\r\n\t\t\t\t// console.log('ontext', nodeValue);\r\n\t\t\t\t// if (nodeValue.length) {\r\n\t\t\t\tconst textNode = new RxText(parentNode, nodeValue);\r\n\t\t\t\tparentNode.childNodes.push(textNode);\r\n\t\t\t\t// }\r\n\t\t\t},\r\n\t\t\tonprocessinginstruction: (nodeName, nodeValue) => {\r\n\t\t\t\t// console.log('onprocessinginstruction', nodeName, nodeValue);\r\n\t\t\t\tif (nodeName === '!doctype') {\r\n\t\t\t\t\tnode = new RxDocumentType(parentNode, nodeValue);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnode = new RxProcessingInstruction(parentNode, nodeValue);\r\n\t\t\t\t}\r\n\t\t\t\tparentNode.childNodes.push(node);\r\n\t\t\t},\r\n\t\t\toncomment: nodeValue => {\r\n\t\t\t\t// console.log('oncomment', nodeValue);\r\n\t\t\t\tnode = new RxComment(parentNode, nodeValue);\r\n\t\t\t\tparentNode.childNodes.push(node);\r\n\t\t\t\t// parentNode = node;\r\n\t\t\t},\r\n\t\t\toncommentend: () => {\r\n\t\t\t\t// console.log('oncommentend');\r\n\t\t\t\t// parentNode = parentNode.parentNode;\r\n\t\t\t},\r\n\t\t\toncdatastart: () => {\r\n\t\t\t\tconsole.log('oncdatastart');\r\n\t\t\t},\r\n\t\t\toncdataend: () => {\r\n\t\t\t\tconsole.log('oncdataend');\r\n\t\t\t},\r\n\t\t\tonerror: error => {\r\n\t\t\t\tconsole.log('error', error);\r\n\t\t\t},\r\n\t\t\t/*\r\n\t\t\tonopentagname: (name) => {\r\n\t\t\t\tconsole.log('onopentagname', name);\r\n\t\t\t},\r\n\t\t\tonattribute: (name, value) => {\r\n\t\t\t\tconsole.log('onattribute', name, value);\r\n\t\t\t},\r\n\t\t\tonreset: () => {\r\n\t\t\t\tconsole.log('reset');\r\n\t\t\t},\r\n\t\t\tonend: () => {\r\n\t\t\t\tconsole.log('end');\r\n\t\t\t},\r\n\t\t\t*/\r\n\t\t},\r\n\t\t{\r\n\t\t\tdecodeEntities: false,\r\n\t\t\tlowerCaseTags: true,\r\n\t\t}\r\n\t);\r\n\tparser.write(html);\r\n\tparser.end();\r\n\treturn doc;\r\n}\r\n\r\nexport function getQueries(selector: string): RxQuery[] {\r\n\tconst queries: RxQuery[] = [];\r\n\tselector\r\n\t\t.trim()\r\n\t\t.split(' ')\r\n\t\t.forEach((x: string) => {\r\n\t\t\tx.trim()\r\n\t\t\t\t.split('>')\r\n\t\t\t\t.forEach((x, i) => {\r\n\t\t\t\t\tconst regex = /\\.([^\\.[]+)|\\[([^\\.\\[]+)\\]|([^\\.\\[\\]]+)/g;\r\n\t\t\t\t\t/*eslint no-useless-escape: \"off\"*/\r\n\t\t\t\t\t// const regex = new RegExp(`\\.([^\\.[]+)|\\[([^\\.\\[]+)\\]|([^\\.\\[\\]]+)`, 'g');\r\n\t\t\t\t\tconst selectors = [];\r\n\t\t\t\t\tconst matches = x.matchAll(regex);\r\n\t\t\t\t\tfor (const match of matches) {\r\n\t\t\t\t\t\tif (match[1]) {\r\n\t\t\t\t\t\t\tselectors.push({ selector: match[1], type: SelectorType.Class });\r\n\t\t\t\t\t\t} else if (match[2]) {\r\n\t\t\t\t\t\t\tselectors.push({\r\n\t\t\t\t\t\t\t\tselector: match[2],\r\n\t\t\t\t\t\t\t\ttype: SelectorType.Attribute,\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t} else if (match[3]) {\r\n\t\t\t\t\t\t\tselectors.push({\r\n\t\t\t\t\t\t\t\tselector: match[3],\r\n\t\t\t\t\t\t\t\ttype: SelectorType.TagName,\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// console.log('match', match);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst selector =\r\n\t\t\t\t\t\ti > 0\r\n\t\t\t\t\t\t\t? { selector: x, selectors, inner: true }\r\n\t\t\t\t\t\t\t: { selector: x, selectors, inner: false };\r\n\t\t\t\t\tqueries.push.call(queries, selector);\r\n\t\t\t\t});\r\n\t\t});\r\n\treturn queries;\r\n}\r\n\r\nexport function querySelectorAll(queries: RxQuery[], childNodes: RxNode[], nodes = []): RxElement[] | null {\r\n\treturn null;\r\n}\r\n\r\nexport function querySelector(queries: RxQuery[], childNodes: RxNode[], query: RxQuery | null = null): RxElement | null {\r\n\tlet node = null;\r\n\tconst match = (child: RxElement, selector: RxSelector) => {\r\n\t\tswitch (selector.type) {\r\n\t\t\tcase SelectorType.Class:\r\n\t\t\t\treturn child.classList.indexOf(selector.selector) !== -1;\r\n\t\t\tcase SelectorType.Attribute:\r\n\t\t\t\treturn Object.keys(child.attributes).indexOf(selector.selector) !== -1;\r\n\t\t\tcase SelectorType.TagName:\r\n\t\t\t\treturn child.nodeName === selector.selector;\r\n\t\t\tdefault:\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\t};\r\n\tif (query || queries.length) {\r\n\t\tquery = query || queries.shift() as RxQuery;\r\n\t\tfor (let child of childNodes) {\r\n\t\t\tif (child instanceof RxElement) {\r\n\t\t\t\tlet has = query.selectors.reduce((p, selector, i) => {\r\n\t\t\t\t\treturn p && match(child as RxElement, selector);\r\n\t\t\t\t}, true);\r\n\t\t\t\tif (has) {\r\n\t\t\t\t\t// console.log(query);\r\n\t\t\t\t\tif (queries.length) {\r\n\t\t\t\t\t\treturn querySelector(queries, child.childNodes);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn child;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (!query.inner) {\r\n\t\t\t\t\tnode = querySelector(queries, child.childNodes, query);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn node;\r\n}\r\n\r\nexport function cloneNode(source: RxNode, deep: boolean = false, parentNode: RxElement | null = null): RxNode {\r\n\tlet node: RxNode;\r\n\tif (isRxElement(source)) {\r\n\t\tconst nodeElement: RxElement = new RxElement(\r\n\t\t\tparentNode,\r\n\t\t\tsource.nodeName,\r\n\t\t\tObject.assign({}, source.attributes)\r\n\t\t);\r\n\t\tif (deep) {\r\n\t\t\tnodeElement.childNodes = source.childNodes.map(x => cloneNode.apply(x, [x, deep, nodeElement]));\r\n\t\t}\r\n\t\tnode = nodeElement;\r\n\t} else if (isRxDocumentFragment(source)) {\r\n\t\tconst nodeDocumentFragment: RxDocumentFragment = new RxDocumentFragment();\r\n\t\tif (deep) {\r\n\t\t\tnodeDocumentFragment.childNodes = source.childNodes.map(x => cloneNode.apply(x, [x, deep, nodeDocumentFragment]));\r\n\t\t}\r\n\t\tnode = nodeDocumentFragment;\r\n\t} else if (isRxText(source)) {\r\n\t\tnode = new RxText(parentNode, source.nodeValue);\r\n\t} else if (isRxComment(source)) {\r\n\t\tnode = new RxComment(parentNode, source.nodeValue);\r\n\t} else if (isRxDocument(source)) {\r\n\t\tconst documentElement: RxDocument = new RxDocument();\r\n\t\tif (deep) {\r\n\t\t\tdocumentElement.childNodes = source.childNodes.map(x => cloneNode.apply(x, [x, deep, documentElement]));\r\n\t\t}\r\n\t\tnode = documentElement;\r\n\t} else {\r\n\t\tthrow ('Invalid node type');\r\n\t}\r\n\treturn node;\r\n}\r\n\r\nexport class RxSelector {\r\n\tselector: string = '';\r\n\ttype: SelectorType = SelectorType.None;\r\n\tconstructor(options: RxSelector) {\r\n\t\tif (options) {\r\n\t\t\tObject.assign(this, options);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class RxQuery {\r\n\tselector: string = '';\r\n\tselectors: RxSelector[] = [];\r\n\tinner: boolean = false;\r\n\tconstructor(options: RxQuery) {\r\n\t\tif (options) {\r\n\t\t\tObject.assign(this, options);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class RxNode {\r\n\tparentNode: RxElement | null;\r\n\tnodeType: RxNodeType;\r\n\tnodeValue: string | null = null;\r\n\r\n\tconstructor(parentNode: RxElement | null = null) {\r\n\t\tthis.parentNode = parentNode;\r\n\t\tthis.nodeType = -1;\r\n\t}\r\n\tcloneNode(deep: boolean = false) {\r\n\t\treturn cloneNode.apply(this, [this, deep]);\r\n\t}\r\n\tserialize(): string {\r\n\t\treturn ``;\r\n\t}\r\n}\r\n\r\nexport class RxElement extends RxNode {\r\n\tnodeName: string;\r\n\tchildNodes: RxNode[];\r\n\tattributes: { [key: string]: string | null };\r\n\tget children(): RxElement[] {\r\n\t\tlet children: RxElement[] = [],\r\n\t\t\ti = 0,\r\n\t\t\tnode,\r\n\t\t\tnodes = this.childNodes;\r\n\t\tnode = nodes[i++];\r\n\t\twhile (node) {\r\n\t\t\tnode = nodes[i++];\r\n\t\t\tif (node.nodeType === RxNodeType.ELEMENT_NODE) {\r\n\t\t\t\tchildren.push(node as RxElement);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn children;\r\n\t}\r\n\tget childElementCount(): number {\r\n\t\tlet i = 0,\r\n\t\t\tcount = 0,\r\n\t\t\tnode,\r\n\t\t\tnodes = this.childNodes;\r\n\t\tnode = nodes[i++];\r\n\t\twhile (node) {\r\n\t\t\tif (node.nodeType === RxNodeType.ELEMENT_NODE) {\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\tnode = nodes[i++];\r\n\t\t}\r\n\t\treturn count;\r\n\t}\r\n\tget firstChild(): RxNode | null {\r\n\t\tlet node = null;\r\n\t\tif (this.childNodes.length) {\r\n\t\t\tnode = this.childNodes[0];\r\n\t\t}\r\n\t\treturn node;\r\n\t}\r\n\tget firstElementChild(): RxElement | null {\r\n\t\tfor (let node of this.childNodes) {\r\n\t\t\tif (isRxElement(node)) {\r\n\t\t\t\treturn node;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\tget lastElementChild(): RxElement | null {\r\n\t\tconst nodes = this.childNodes;\r\n\t\tfor (let i = nodes.length - 1; i > -1; i--) {\r\n\t\t\tconst node = nodes[i];\r\n\t\t\tif (isRxElement(node)) {\r\n\t\t\t\treturn node;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\tget previousSibling(): RxNode | null {\r\n\t\tlet node = null;\r\n\t\tif (this.parentNode) {\r\n\t\t\tconst index = this.parentNode.childNodes.indexOf(this);\r\n\t\t\tif (index > 0) {\r\n\t\t\t\tnode = this.parentNode.childNodes[index - 1];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn node;\r\n\t}\r\n\tget nextSibling(): RxNode | null {\r\n\t\tlet node = null;\r\n\t\tif (this.parentNode) {\r\n\t\t\tconst index = this.parentNode.childNodes.indexOf(this);\r\n\t\t\tif (index !== -1 && index < this.parentNode.childNodes.length - 1) {\r\n\t\t\t\tnode = this.parentNode.childNodes[index];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn node;\r\n\t}\r\n\tget wholeText() {\r\n\t\tlet nodeValue;\r\n\t\tif (this.nodeType === RxNodeType.TEXT_NODE) {\r\n\t\t\treturn this.nodeValue;\r\n\t\t}\r\n\t\treturn nodeValue;\r\n\t}\r\n\tget outerHTML(): string | null {\r\n\t\tlet html = null;\r\n\t\tif (this.parentNode) {\r\n\t\t\thtml = this.parentNode.serialize();\r\n\t\t}\r\n\t\treturn html;\r\n\t}\r\n\tget classList(): string[] {\r\n\t\tconst classList: string[] = this.attributes.class\r\n\t\t\t? this.attributes.class.split(' ').map(c => c.trim())\r\n\t\t\t: [];\r\n\t\treturn classList;\r\n\t}\r\n\tset innerText(nodeValue: string | null) {\r\n\t\tthis.childNodes = [new RxText(this, nodeValue)];\r\n\t}\r\n\tget innerText(): string | null {\r\n\t\t// return this.childNodes.filter((n): n is RxText => isRxText(n)).map(n => n.innerText).join('');\r\n\t\treturn this.childNodes.filter((n): n is RxText | RxElement => isRxText(n) || isRxElement(n)).map(n => n.innerText).join('');\r\n\t}\r\n\tset textContent(nodeValue: string | null) {\r\n\t\tthis.innerText = String(nodeValue);\r\n\t}\r\n\tget textContent(): string | null {\r\n\t\treturn this.innerText;\r\n\t}\r\n\tset innerHTML(html: string) {\r\n\t\tconst doc = parse(html);\r\n\t\tconst childNodes = doc.childNodes.map(n => {\r\n\t\t\tn.parentNode = this;\r\n\t\t\treturn n;\r\n\t\t});\r\n\t\tthis.childNodes = childNodes;\r\n\t}\r\n\tconstructor(parentNode: RxElement | null = null, nodeName: string, attributes: { [key: string]: string | null } | null = null) {\r\n\t\tsuper(parentNode);\r\n\t\tthis.nodeType = RxNodeType.ELEMENT_NODE;\r\n\t\tthis.nodeName = nodeName;\r\n\t\tthis.attributes = attributes || {};\r\n\t\tthis.childNodes = [];\r\n\t\t/*\r\n\t\t\tif (SKIP.indexOf(nodeName) === -1) {\r\n\t\t\t\tconsole.log(parentNode.nodeName, '>', nodeName);\r\n\t\t}\r\n\t\t*/\r\n\t}\r\n\tappend(...nodesOrDOMStrings: (RxNode | string)[]) {\r\n\t\tnodesOrDOMStrings = nodesOrDOMStrings.map(nodeOrDomString => {\r\n\t\t\tlet node;\r\n\t\t\tif (typeof nodeOrDomString === 'string') {\r\n\t\t\t\tnode = new RxText(this, nodeOrDomString);\r\n\t\t\t} else {\r\n\t\t\t\tnode = nodeOrDomString;\r\n\t\t\t\tnode.parentNode = this;\r\n\t\t\t}\r\n\t\t\treturn node;\r\n\t\t});\r\n\t\tArray.prototype.push.apply(this.childNodes, nodesOrDOMStrings);\r\n\t\t/*\r\n\t\tfor (let nodeOrDomString of nodesOrDOMStrings) {\r\n\t\t\t\tlet node;\r\n\t\t\t\tif (typeof nodeOrDomString === 'string') {\r\n\t\t\t\t\tnode = new RxText(this, nodeOrDomString);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnode = nodeOrDomString;\r\n\t\t\t\t}\r\n\t\t\t\tthis.childNodes.push(node);\r\n\t\t}\r\n\t\t*/\r\n\t}\r\n\tprepend(...nodesOrDOMStrings: (RxNode | string)[]) {\r\n\t\tnodesOrDOMStrings = nodesOrDOMStrings.map(nodeOrDomString => {\r\n\t\t\tlet node;\r\n\t\t\tif (typeof nodeOrDomString === 'string') {\r\n\t\t\t\tnode = new RxText(this, nodeOrDomString);\r\n\t\t\t} else {\r\n\t\t\t\tnode = nodeOrDomString;\r\n\t\t\t\tnode.parentNode = this;\r\n\t\t\t}\r\n\t\t\treturn node;\r\n\t\t});\r\n\t\tArray.prototype.unshift.apply(this.childNodes, nodesOrDOMStrings);\r\n\t\t/*\r\n\t\t\tfor (let nodeOrDomString of nodesOrDOMStrings) {\r\n\t\t\t\tlet node;\r\n\t\t\t\tif (typeof nodeOrDomString === 'string') {\r\n\t\t\t\t\tnode = new RxText(this, nodeOrDomString);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnode = nodeOrDomString;\r\n\t\t\t\t}\r\n\t\t\t\tthis.childNodes.unshift(node);\r\n\t\t}\r\n\t\t*/\r\n\t}\r\n\treplaceChildren(...nodesOrDOMStrings: (RxNode | string)[]) {\r\n\t\tconst nodes: RxNode[] = nodesOrDOMStrings.map((nodeOrDomString) => {\r\n\t\t\tlet node: RxNode;\r\n\t\t\tif (typeof nodeOrDomString === 'string') {\r\n\t\t\t\tnode = new RxText(this, nodeOrDomString);\r\n\t\t\t} else {\r\n\t\t\t\tnode = nodeOrDomString as RxNode;\r\n\t\t\t\tnode.parentNode = this;\r\n\t\t\t}\r\n\t\t\treturn node;\r\n\t\t});\r\n\t\tthis.childNodes = nodes;\r\n\t}\r\n\tquerySelectorAll(selector: string): RxNode[] | null {\r\n\t\tconst queries = getQueries(selector);\r\n\t\tconst nodes = this.childNodes.filter(x => {\r\n\t\t\treturn true;\r\n\t\t});\r\n\t\tconsole.log(queries);\r\n\t\treturn nodes.length ? nodes : null;\r\n\t}\r\n\tquerySelector(selector: string): RxNode | null {\r\n\t\tconst queries = getQueries(selector);\r\n\t\tconst node = querySelector(queries, this.childNodes);\r\n\t\treturn node;\r\n\t}\r\n\thasAttribute(attribute: string): boolean {\r\n\t\treturn Object.keys(this.attributes).indexOf(attribute.toLowerCase()) !== -1;\r\n\t}\r\n\tgetAttribute(attribute: string): string | null {\r\n\t\treturn this.attributes[attribute.toLowerCase()] || null;\r\n\t}\r\n\tsetAttribute(attribute: string, value: any) {\r\n\t\tthis.attributes[attribute.toLowerCase()] = value.toString();\r\n\t}\r\n\tremoveAttribute(attribute: string) {\r\n\t\tdelete this.attributes[attribute];\r\n\t}\r\n\treplaceChild(newChild: RxNode, oldChild: RxNode): RxNode {\r\n\t\tconst index = this.childNodes.indexOf(oldChild);\r\n\t\tif (index !== -1) {\r\n\t\t\tthis.childNodes[index] = newChild;\r\n\t\t\tnewChild.parentNode = this;\r\n\t\t}\r\n\t\t// console.log('replaceChild', this, newChild, oldChild);\r\n\t\treturn oldChild;\r\n\t}\r\n\tremoveChild(child: RxNode): RxNode {\r\n\t\tif (!(child instanceof RxNode)) {\r\n\t\t\tthrow (`Uncaught TypeError: Failed to execute 'removeChild' on 'Node': parameter 1 is not of type 'Node'.`);\r\n\t\t}\r\n\t\tconst index = this.childNodes.indexOf(child);\r\n\t\tif (index === -1) {\r\n\t\t\tthrow (`Uncaught NotFoundError: Failed to execute 'removeChild' on 'Node': The node to be removed is not a child of this node.`);\r\n\t\t}\r\n\t\tthis.childNodes.splice(index, 1);\r\n\t\t// console.log('removeChild', this.childNodes.length);\r\n\t\treturn child;\r\n\t}\r\n\tinsertBefore(newNode: RxNode, referenceNode: RxNode | null = null): RxNode {\r\n\t\tconst index = referenceNode\r\n\t\t\t? this.childNodes.indexOf(referenceNode)\r\n\t\t\t: this.childNodes.length;\r\n\t\tif (index !== -1) {\r\n\t\t\tthis.childNodes.splice(index, 0, newNode);\r\n\t\t\tnewNode.parentNode = this;\r\n\t\t}\r\n\t\t// console.log('insertBefore', this, newNode, referenceNode);\r\n\t\treturn newNode;\r\n\t}\r\n\tcloneNode(deep: boolean = false) {\r\n\t\treturn cloneNode.apply(this, [this, deep]);\r\n\t}\r\n\taddListener(eventName: string, handler: (e: any) => {}) { }\r\n\tremoveListener(eventName: string, handler: (e: any) => {}) { }\r\n\tserialize(): string {\r\n\t\treturn `<${\r\n\t\t\tthis.nodeName\r\n\t\t\t}${this.serializeAttributes()}>${this.childNodes\r\n\t\t\t\t.map(x => x.serialize())\r\n\t\t\t\t.join('')}</${this.nodeName}>`;\r\n\t}\r\n\tserializeAttributes(): string {\r\n\t\tlet attributes = '';\r\n\t\tconst keys = Object.keys(this.attributes);\r\n\t\tif (keys.length) {\r\n\t\t\tattributes =\r\n\t\t\t\t' ' +\r\n\t\t\t\tkeys\r\n\t\t\t\t\t.map(k => {\r\n\t\t\t\t\t\treturn `${k}=\"${this.attributes[k]}\"`;\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.join(' ');\r\n\t\t}\r\n\t\treturn attributes;\r\n\t}\r\n}\r\n\r\nexport class RxText extends RxNode {\r\n\tnodeValue: string;\r\n\tget outerHTML(): string | null {\r\n\t\tlet html = null;\r\n\t\tif (this.parentNode) {\r\n\t\t\thtml = this.parentNode.serialize();\r\n\t\t}\r\n\t\treturn html;\r\n\t}\r\n\tget wholeText(): string | null {\r\n\t\treturn this.nodeValue;\r\n\t}\r\n\tset innerText(nodeValue) {\r\n\t\tthis.nodeValue = String(nodeValue);\r\n\t}\r\n\tget innerText(): string | null {\r\n\t\treturn this.nodeValue;\r\n\t}\r\n\tset textContent(nodeValue) {\r\n\t\tthis.nodeValue = String(nodeValue);\r\n\t}\r\n\tget textContent(): string | null {\r\n\t\treturn this.nodeValue;\r\n\t}\r\n\tconstructor(parentNode: RxElement | null = null, nodeValue: any) {\r\n\t\tsuper(parentNode);\r\n\t\tthis.nodeType = RxNodeType.TEXT_NODE;\r\n\t\tthis.nodeValue = String(nodeValue);\r\n\t\t// console.log('RxText', nodeValue);\r\n\t}\r\n\tserialize(): string {\r\n\t\treturn this.nodeValue;\r\n\t}\r\n}\r\n\r\nexport class RxCData extends RxNode {\r\n\tnodeValue: string;\r\n\tget outerHTML(): string | null {\r\n\t\tlet html = null;\r\n\t\tif (this.parentNode) {\r\n\t\t\thtml = this.parentNode.serialize();\r\n\t\t}\r\n\t\treturn html;\r\n\t}\r\n\tget wholeText(): string | null {\r\n\t\treturn this.nodeValue;\r\n\t}\r\n\tset innerText(nodeValue) {\r\n\t\tthis.nodeValue = String(nodeValue);\r\n\t}\r\n\tget innerText(): string | null {\r\n\t\treturn this.nodeValue;\r\n\t}\r\n\tset textContent(nodeValue) {\r\n\t\tthis.nodeValue = String(nodeValue);\r\n\t}\r\n\tget textContent(): string | null {\r\n\t\treturn this.nodeValue;\r\n\t}\r\n\tconstructor(parentNode: RxElement | null = null, nodeValue: any) {\r\n\t\tsuper(parentNode);\r\n\t\tthis.nodeType = RxNodeType.CDATA_SECTION_NODE;\r\n\t\tthis.nodeValue = String(nodeValue);\r\n\t}\r\n\tserialize(): string {\r\n\t\treturn this.nodeValue;\r\n\t}\r\n}\r\n\r\nexport class RxComment extends RxNode {\r\n\tnodeValue: string;\r\n\tget outerHTML(): string | null {\r\n\t\tlet html = null;\r\n\t\tif (this.parentNode) {\r\n\t\t\thtml = this.parentNode.serialize();\r\n\t\t}\r\n\t\treturn html;\r\n\t}\r\n\tget wholeText(): string | null {\r\n\t\treturn this.nodeValue;\r\n\t}\r\n\tset innerText(nodeValue) {\r\n\t\tthis.nodeValue = String(nodeValue);\r\n\t}\r\n\tget innerText(): string | null {\r\n\t\treturn this.nodeValue;\r\n\t}\r\n\tset textContent(nodeValue) {\r\n\t\tthis.nodeValue = String(nodeValue);\r\n\t}\r\n\tget textContent(): string | null {\r\n\t\treturn this.nodeValue;\r\n\t}\r\n\tconstructor(parentNode: RxElement | null = null, nodeValue: any) {\r\n\t\tsuper(parentNode);\r\n\t\tthis.nodeType = RxNodeType.COMMENT_NODE;\r\n\t\tthis.nodeValue = String(nodeValue);\r\n\t}\r\n\tserialize(): string {\r\n\t\treturn `<!--${this.nodeValue}-->`;\r\n\t}\r\n}\r\n\r\nexport class RxProcessingInstruction extends RxNode {\r\n\tconstructor(parentNode: RxElement | null = null, nodeValue: any) {\r\n\t\tsuper(parentNode);\r\n\t\tthis.nodeType = RxNodeType.PROCESSING_INSTRUCTION_NODE;\r\n\t\tthis.nodeValue = String(nodeValue);\r\n\t}\r\n\tserialize(): string {\r\n\t\treturn `<${this.nodeValue}>`;\r\n\t}\r\n}\r\n\r\nexport class RxDocumentType extends RxNode {\r\n\tconstructor(parentNode: RxElement | null = null, nodeValue: any) {\r\n\t\tsuper(parentNode);\r\n\t\tthis.nodeType = RxNodeType.DOCUMENT_TYPE_NODE;\r\n\t\tthis.nodeValue = String(nodeValue);\r\n\t}\r\n\tserialize(): string {\r\n\t\treturn `<${this.nodeValue}>`;\r\n\t}\r\n}\r\n\r\nexport class RxDocumentFragment extends RxElement {\r\n\tconstructor() {\r\n\t\tsuper(null, '#document-fragment');\r\n\t\tthis.nodeType = RxNodeType.DOCUMENT_FRAGMENT_NODE;\r\n\t\tthis.childNodes = [];\r\n\t}\r\n}\r\n\r\nexport class RxDocument extends RxElement {\r\n\tget hidden(): true {\r\n\t\treturn true;\r\n\t}\r\n\tget visibilityState(): 'prerender' {\r\n\t\treturn 'prerender';\r\n\t}\r\n\tget doctype(): RxDocumentType | null {\r\n\t\treturn this.childNodes.find(x => isRxDocumentType(x)) as RxDocumentType;\r\n\t}\r\n\tget body(): RxElement | null {\r\n\t\treturn this.childNodes.find(x => isRxElement(x) && x.nodeName === 'body') as RxElement;\r\n\t}\r\n\tget head(): RxElement | null {\r\n\t\treturn this.childNodes.find(x => isRxElement(x) && x.nodeName === 'head') as RxElement;\r\n\t}\r\n\tget title(): string | null {\r\n\t\tconst title = this.childNodes.find(x => isRxElement(x) && x.nodeName === 'title') as RxElement;\r\n\t\tif (title) {\r\n\t\t\treturn title.innerText;\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\tset title(nodeValue: string | null) {\r\n\t\tconst title = this.childNodes.find(x => isRxElement(x) && x.nodeName === 'title') as RxElement;\r\n\t\tif (title) {\r\n\t\t\ttitle.innerText = nodeValue;\r\n\t\t}\r\n\t}\r\n\tget documentElement(): RxElement | null {\r\n\t\treturn this.firstElementChild;\r\n\t}\r\n\tconstructor() {\r\n\t\tsuper(null, '#document');\r\n\t\tthis.nodeType = RxNodeType.DOCUMENT_NODE;\r\n\t\tthis.childNodes = [];\r\n\t}\r\n\tcreateAttribute() { }\r\n\t// Creates a new Attr object and returns it.\r\n\tcreateAttributeNS() { }\r\n\t// Creates a new attribute node in a given namespace and returns it.\r\n\tcreateCDATASection() { }\r\n\t// Creates a new CDATA node and returns it.\r\n\tcreateComment(nodeValue: string) {\r\n\t\treturn new RxComment(null, nodeValue);\r\n\t}\r\n\t// Creates a new comment node and returns it.\r\n\tcreateDocumentFragment() {\r\n\t\treturn new RxDocumentFragment();\r\n\t}\r\n\t// Creates a new document fragment.\r\n\tcreateElement(nodeName: string): RxElement {\r\n\t\treturn new RxElement(null, nodeName);\r\n\t}\r\n\t// Creates a new element with the given tag name.\r\n\tcreateElementNS(nodeName: string): RxElement {\r\n\t\treturn new RxElement(null, nodeName);\r\n\t}\r\n\t// Creates a new element with the given tag name and namespace URI.\r\n\tcreateEvent() { }\r\n\t// Creates an event object.\r\n\tcreateNodeIterator() { }\r\n\t// Creates a NodeIterator object.\r\n\tcreateProcessingInstruction(nodeValue: string) {\r\n\t\treturn new RxProcessingInstruction(null, nodeValue);\r\n\t}\r\n\t// Creates a new ProcessingInstruction object.\r\n\tcreateRange() { }\r\n\t// Creates a Range object.\r\n\tcreateTextNode(nodeValue: string) {\r\n\t\treturn new RxText(null, nodeValue);\r\n\t}\r\n\t// Creates a text node.\r\n\tcreateTouchList() { }\r\n\t// Creates a TouchList object.\r\n\tcreateTreeWalker() { }\r\n\t// Creates a TreeWalker object.\r\n\tserialize(): string {\r\n\t\treturn `${this.childNodes.map(x => x.serialize()).join('')}`;\r\n\t}\r\n}\r\n","import { parse, RxDocument } from './node';\r\n\r\nexport default class Renderer {\r\n\tstatic document: Document | RxDocument;\r\n\tstatic bootstrap(documentOrHtml: Document | string) {\r\n\t\tif (typeof documentOrHtml === 'string') {\r\n\t\t\tthis.document = parse(documentOrHtml);\r\n\t\t} else {\r\n\t\t\tthis.document = documentOrHtml;\r\n\t\t}\r\n\t\tif (typeof process !== 'undefined') {\r\n\t\t\tglobal.document = this.document as Document;\r\n\t\t}\r\n\t}\r\n\r\n\tstatic querySelector(selector: string) {\r\n\t\treturn this.document.querySelector(selector);\r\n\t}\r\n}\r\n","import { IElement, Module, Platform } from 'rxcomp';\r\nimport { RxDocument } from '../renderer/node';\r\nimport Renderer from '../renderer/renderer';\r\n\r\nexport default class Server extends Platform {\r\n\tstatic bootstrap(moduleFactory?: typeof Module, html?: string) {\r\n\t\tif (!html) {\r\n\t\t\tthrow 'missing html template';\r\n\t\t}\r\n\t\tRenderer.bootstrap(html);\r\n\t\tif (!moduleFactory) {\r\n\t\t\tthrow 'missing moduleFactory';\r\n\t\t}\r\n\t\tif (!moduleFactory.meta) {\r\n\t\t\tthrow 'missing moduleFactory meta';\r\n\t\t}\r\n\t\tif (!moduleFactory.meta.bootstrap) {\r\n\t\t\tthrow 'missing bootstrap';\r\n\t\t}\r\n\t\tif (!moduleFactory.meta.bootstrap.meta) {\r\n\t\t\tthrow 'missing bootstrap meta';\r\n\t\t}\r\n\t\tif (!moduleFactory.meta.bootstrap.meta.selector) {\r\n\t\t\tthrow 'missing bootstrap meta selector';\r\n\t\t}\r\n\t\tconst meta = this.resolveMeta(moduleFactory);\r\n\t\tconst module = new moduleFactory();\r\n\t\tmodule.meta = meta;\r\n\t\tconst instances = module.compile(meta.node, {} as Window);\r\n\t\tmodule.instances = instances;\r\n\t\tconst root = instances[0];\r\n\t\troot.pushChanges();\r\n\t\treturn module;\r\n\t}\r\n\r\n\tstatic querySelector(selector: string): IElement | null {\r\n\t\treturn Renderer.document.querySelector(selector) as IElement;\r\n\t}\r\n\r\n\tstatic serialize(): string {\r\n\t\tconsole.log('Server.serialize');\r\n\t\tif (Renderer.document instanceof RxDocument) {\r\n\t\t\tconst serialized = Renderer.document.serialize();\r\n\t\t\t// console.log('serialized', serialized);\r\n\t\t\treturn serialized;\r\n\t\t} else {\r\n\t\t\tthrow ('Renderer.document is not an instance of RxDocument');\r\n\t\t}\r\n\t}\r\n}\r\n","import { Factory, IModuleMeta, Module, Pipe } from 'rxcomp';\n\nconst factories: typeof Factory[] = [\n];\n\nconst pipes: typeof Pipe[] = [\n];\n\n/**\n *  ServerModule Class.\n * @example\n * export default class AppModule extends Module {}\n *\n * AppModule.meta = {\n *  imports: [\n *   CoreModule,\n *    ServerModule\n *  ],\n *  declarations: [\n *   ErrorsComponent\n *  ],\n *  bootstrap: AppComponent,\n * };\n * @extends Module\n */\nexport default class ServerModule extends Module {\n\n\tstatic meta: IModuleMeta = {\n\t\tdeclarations: [\n\t\t\t...factories,\n\t\t\t...pipes,\n\t\t],\n\t\texports: [\n\t\t\t...factories,\n\t\t\t...pipes,\n\t\t]\n\t};\n\n}\n"]}